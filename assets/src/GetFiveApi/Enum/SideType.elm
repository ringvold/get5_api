-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module GetFiveApi.Enum.SideType exposing (..)

import Json.Decode as Decode exposing (Decoder)


type SideType
    = AlwaysKnife
    | NeverKnife
    | Standard


list : List SideType
list =
    [ AlwaysKnife, NeverKnife, Standard ]


decoder : Decoder SideType
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "ALWAYS_KNIFE" ->
                        Decode.succeed AlwaysKnife

                    "NEVER_KNIFE" ->
                        Decode.succeed NeverKnife

                    "STANDARD" ->
                        Decode.succeed Standard

                    _ ->
                        Decode.fail ("Invalid SideType type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representing the Enum to a string that the GraphQL server will recognize.
-}
toString : SideType -> String
toString enum____ =
    case enum____ of
        AlwaysKnife ->
            "ALWAYS_KNIFE"

        NeverKnife ->
            "NEVER_KNIFE"

        Standard ->
            "STANDARD"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe SideType
fromString enumString____ =
    case enumString____ of
        "ALWAYS_KNIFE" ->
            Just AlwaysKnife

        "NEVER_KNIFE" ->
            Just NeverKnife

        "STANDARD" ->
            Just Standard

        _ ->
            Nothing
