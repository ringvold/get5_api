-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module GetFiveApi.Mutation exposing (..)

import GetFiveApi.InputObject
import GetFiveApi.Interface
import GetFiveApi.Object
import GetFiveApi.Scalar
import GetFiveApi.ScalarCodecs
import GetFiveApi.Union
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode exposing (Decoder)


type alias CreateMatchOptionalArguments =
    { enforceTeams : OptionalArgument Bool
    , spectatorIds : OptionalArgument (List (Maybe String))
    , title : OptionalArgument String
    , vetoFirst : OptionalArgument String
    }


type alias CreateMatchRequiredArguments =
    { gameServer : String
    , seriesType : String
    , team1 : String
    , team2 : String
    , vetoMapPool : List (Maybe String)
    }


{-| Create a match
-}
createMatch :
    (CreateMatchOptionalArguments -> CreateMatchOptionalArguments)
    -> CreateMatchRequiredArguments
    -> SelectionSet decodesTo GetFiveApi.Object.Match
    -> SelectionSet (Maybe decodesTo) RootMutation
createMatch fillInOptionals requiredArgs object_ =
    let
        filledInOptionals =
            fillInOptionals { enforceTeams = Absent, spectatorIds = Absent, title = Absent, vetoFirst = Absent }

        optionalArgs =
            [ Argument.optional "enforceTeams" filledInOptionals.enforceTeams Encode.bool, Argument.optional "spectatorIds" filledInOptionals.spectatorIds (Encode.string |> Encode.maybe |> Encode.list), Argument.optional "title" filledInOptionals.title Encode.string, Argument.optional "vetoFirst" filledInOptionals.vetoFirst Encode.string ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "createMatch" (optionalArgs ++ [ Argument.required "gameServer" requiredArgs.gameServer Encode.string, Argument.required "seriesType" requiredArgs.seriesType Encode.string, Argument.required "team1" requiredArgs.team1 Encode.string, Argument.required "team2" requiredArgs.team2 Encode.string, Argument.required "vetoMapPool" requiredArgs.vetoMapPool (Encode.string |> Encode.maybe |> Encode.list) ]) object_ (identity >> Decode.nullable)


type alias CreateTeamRequiredArguments =
    { name : String
    , players : List (Maybe GetFiveApi.InputObject.PlayerInput)
    }


{-| Create a team
-}
createTeam :
    CreateTeamRequiredArguments
    -> SelectionSet decodesTo GetFiveApi.Object.Team
    -> SelectionSet (Maybe decodesTo) RootMutation
createTeam requiredArgs object_ =
    Object.selectionForCompositeField "createTeam" [ Argument.required "name" requiredArgs.name Encode.string, Argument.required "players" requiredArgs.players (GetFiveApi.InputObject.encodePlayerInput |> Encode.maybe |> Encode.list) ] object_ (identity >> Decode.nullable)
